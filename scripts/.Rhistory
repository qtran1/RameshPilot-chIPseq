library(RNASeqpower)
library("RNASeqpower")
source("http://bioconductor.org/biocLite.R")
biocLite("RNASeqpower")
biocLite("RNASeqPower")
library(RNASeqPower)
rnapower(depth=10, cv=0.4, alpha=0.05, d=1.8, power=0.8)
rnapower(depth=10, cv=0.4, alpha=0.05, effect=1.8, power=0.8)
rnapower(depth=30, cv=0.4, alpha=0.05, effect=1.8, power=0.8)
rnapower(depth=20, cv=0.4, alpha=0.05, effect=1.8, power=0.8)
rnapower(depth=10, cv=0.4, alpha=0.05, effect=1.8, power=0.8)
rnapower(depth=10, cv=0.4, alpha=0.05, effect=1.8, n=10)
pwd
setwd
source('http://bioconductor.org/biocLite.R')
biocLite("gcrma")
biocLite("limma",'affyPLM')
biocLite("affyPLM")
biocLite("affy")
wkdir <- '/MiRNA_010914/imageFile/CEL_files/'
setwd <- wkdir
library(affy)
library(gcrma)
affy.data <- ReadAffy()
setwd(wkdir)
getwd
pwd
source(http://bioconductor.org/biocLite.R)
source("http://bioconductor.org/biocLite.R")
biocLite("RNASeqPower")
a
install.packages("~/Downloads/PROPER_0.85.tar", repos = NULL)
install.packages("~/Downloads/PROPER_0.85.tar", source=TRUE)
library(PROPER)
install.packages("~/Downloads/PROPER_0.85.tar", source=TRUE)
help(install.packages)
install.packages("~/Downloads/PROPER_0.85.tar", repos = NULL, type="source")
library(PROPER)
help(PROPER)
??PROPER
library(RNASeqPower)
rnapower(depth=20, cv=.4, effect=c(1.25, 1.5, 1.75, 2),         alpha= .05, power=c(.8, .9))
rnapower(depth=20, cv=.1, effect=c(1.25, 1.5, 1.75, 2),alpha= .05, power=c(.8, .9))
rnapower(depth=10, cv=.1, effect=c(1.25, 1.5, 1.75, 2),alpha= .05, power=c(.8, .9))
rnapower(depth=10, cv=.1, effect=c(1.5),alpha= .05, power=c(.8))
install.packages("KernSmooth")
library(KernSmooth)
---
title: "HelloWorld"
title: "HelloWorld"
title: "Hello World"
## This is an R Markdown file
## This is an R Markdown file
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
source("http://bioconductor.org/biocLite.R")
biocLite("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
trainInex
trainIndex
training = adData[trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50, list=FALSE)
training = adData[trainIndex,]
training
heat(training)
head(training)
training = adData[-trainIndex,]
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(testing)
head(trainingIndex)
trainingIndex
trainIndex
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(inTrain)
head(concrete)
?plot
library(ggplot2)
summary(concrete)
dim(training)
dim(testing)
featurePlot(x=training[,c("Age", "Cement", "Water")], y=training$CompressiveStrength,
plot="pairs")
featurePlot(x=training[,c("Age", "BlastFurnaceSlag", "FlyAsh",
"Superplasticizer", "CoarseAggregate", "FineAggregate",
"Cement", "Water")], y=training$CompressiveStrength, plot="pairs")
qq <- qplot(CompressiveStrength, rownames(training), colour=Age, data=training)
qq
rownames(training)
qq + geom_smooth(method='lm', formula=y~x)
qq <- qplot(CompressiveStrength, rownames(training), colour=cut2(training$Age,g=3), data=training)
qq + geom_smooth(method='lm', formula=y~x)
library(Hmisc)
qq <- qplot(CompressiveStrength, rownames(training), colour=cut2(training$Age,g=3), data=training)
qq + geom_smooth(method='lm', formula=y~x)
qq <- qplot(CompressiveStrength, cutAge, data=training, fill=cutAge, geom=c("boxplot"))
cutAge <- cut2(training$Age, g=3)
qq <- qplot(CompressiveStrength, cutAge, data=training, fill=cutAge, geom=c("boxplot"))
qq
qq <- qplot(cutAge, CompressiveStrength, data=training, fill=cutAge, geom=c("boxplot"))
qq
qq <- qplot(cutAge, CompressiveStrength, data=training, fill=cutAge, geom=c("boxplot", "jitter"))
qq
qq <- qplot(rownames(training), CompressiveStrength, colour=cut2(training$BlastFurnaceSlag,g=3), data=training)
qq + geom_smooth(method='lm', formula=y~x)
qq <- qplot(rownames(training), CompressiveStrength, colour=cut2(training$FlyAsh,g=3), data=training)
qq
qq <- qplot(rownames(training), CompressiveStrength, colour=cut2(training$FlyAsh,g=5), data=training)
qq
qq <- qplot(rownames(training), CompressiveStrength, colour=cut2(training$Superplasticizer,g=5), data=training)
qq
qq <- qplot(rownames(training), CompressiveStrength, colour=cut2(training$Superplasticizer,g=3), data=training)
qq
qq <- qplot(cut2(training$Superplasticizer,g=3), CompressiveStrength, data=training, fill=cutAge, geom=c("boxplot", "jitter"))
qq
cutSuper<-cut2(training$Superplasticizer,g=3)
qq <- qplot(cut2(training$Superplasticizer,g=3), CompressiveStrength, data=training, fill=cutSuper, geom=c("boxplot", "jitter"))
qq
cutAge <- cut2(training$Age, g=3)
cutSuper<-cut2(training$Superplasticizer,g=3)
cutFlyAsh<-cut2(training$FlyAsh,g=3)
cutBlast<-cut2(training$BlastFurnaceSlag,g=3)
cutCement<-cut2(training$Cement,g=3)
cutWater<-cut2(training$Water,g=3)
cutFine<-cut2(training$FineAggregate,g=3)
cutCoars<-cut2(training$CoarseAggregate,g=3)
cutCoarse<-cut2(training$CoarseAggregate,g=3)
qq <- qplot(rownames(training), CompressiveStrength, colour=cutCoarse, data=training)
qplot(rownames(training), CompressiveStrength, colour=cutCoarse, data=training)
qplot(rownames(training), CompressiveStrength, colour=cutFine, data=training)
qplot(rownames(training), CompressiveStrength, colour=cutWater, data=training)
qplot(rownames(training), CompressiveStrength, colour=cutCement, data=training)
qplot(rownames(training), CompressiveStrength, colour=cutBlast, data=training)
qplot(rownames(training), CompressiveStrength, colour=cutFlyAsh, data=training)
qplot(rownames(training), CompressiveStrength, colour=cutSuper, data=training)
hist(training$SuperPlasticizer)
hist(training$SuperPlasticizer, data=training)
?hist
qqplot(SuperPlasticizer, data=training, geom="density")
qqplot(Superplasticizer, data=training, geom="density")
qqplot(Superplasticizer, data=training, geom="density")
colnames(training)
qqplot(Superplasticizer, colour=Age, data=training, geom="density")
qqplot(CompressiveStrength, colour=Age, data=training, geom="density")
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qqplot(Superplasticizer, colour=Age, data=training, geom="density")
qplot(Superplasticizer, colour=Age, data=training, geom="density")
qplot(Superplasticizer,data=training, geom="density")
qplot(log(Superplasticizer),data=training, geom="density")
set.seed(3433)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[trainIndex,]
testing = adData[-trainIndex,]
colnames(training)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
modelfit = train(CompressiveStrenght~., data=training, method="glm")
dim(training)
dim(testing)
hist(training$Superplasticizer, main="", xlab="Superplasticizer")
hist(log(training$Superplasticizer), main="", xlab="Superplasticizer")
a<-colname(training)%in%"IL"
a<-colnames(training)%in%"IL"
a
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[trainIndex,]
testing = adData[-trainIndex,]
a<-colnames(training)%in%"IL"
a
a<-substring(colnames(training),1,2)=="IL"
a
pc(training[,a])
prcomp(training[,a])
prComp<-prcomp(training[,a])
plot(prComp$x[,1], prComp$x[,2])
prComp$rotation
hist(prComp, main="", xlab="PCA")
summary(prComp)
preProc <- preProcess(training, method="pca", pcaComp=3)
head(predictors)
colnames(diagnosis)
diagnosis
predictorsIL <- substring(colnames(predictors),1,2)=="IL"
adData = data.frame(diagnosis,predictorsIL)
adData = data.frame(diagnosis,predictors[,predictorsIL])
trainIndex = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(training)
modelfit = train(diagnosis~., data=training, method="glm")
modelfit = train(diagnosis ~ ., data=training, method="glm")
library(caret)
library(AppliedPredictiveModeling)
training
summary(training)
modelfit = train(diagnosis ~ ., data=training, method="glm")
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
modelfit = train(CompressiveStrenghth~., data=training, method="glm")
modelfit = train(CompressiveStrength~., data=training, method="glm")
modelfit = train(diagnosis ~ ., data=training, method="lm")
library(AppliedPredictiveModeling)
library(caret)
library(ggplot2)
set.seed(3433)
data(AlzheimerDisease)
predictorsIL <- substring(colnames(predictors),1,2)=="IL"
adData = data.frame(diagnosis,predictors[,predictorsIL])
trainIndex = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[trainIndex,]
testing = adData[-trainIndex,]
modelfit = train(diagnosis ~ ., data=training, method="lm")
modelfit = train(diagnosis ~ ., data=training, method="glm")
install.packages("e1071")
modelfit = train(diagnosis ~ ., data=training, method="glm")
modelfit
preProc <- preProcess(training, method="pca", pcaComp=3)
trainIL <- predict(predictorsIL, training)
trainIL <- predict(predictors[,predictorsIL], training)
preProc <- preProcess(training, method="pca", pcaComp=3)
head(training)
preProc <- preProcess(training[,2:13], method="pca", pcaComp=3)
trainPC <- predict(preProc, training)
trainPC <- predict(preProc, training[,2:13])
modelfit2 <- train(diagnosis ~ ., data=trainPC, method="glm")
trainPC
head(trainPC)
modelfit2 <- train(training$diagnosis ~ ., data=trainPC, method="glm")
modelfit2
head(preProc)
trainIL <- predict(predictors[,predictorsIL], training[,2:13])
preProc
summary(preProc)
prComp
summary(prComp)
?preProcess
preProc <- preProcess(training[,2:13], method="pca", thresh=.8)
numComp(preProc)
preProc
trainPC <- predict(preProc, training[,2:13])
modelfit2 <- train(training$diagnosis ~ ., data=trainPC, method="glm")
modelfit2
modelfit = train(diagnosis ~ ., data=training, method="glm")
modelfit
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
trainMix = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
modelfit = train(CompressiveStrength~., data=trainMix, method="glm")
dim(trainMix)
dim(testing)
hist(trainMix$SuperPlasticizer, data=training)
hist(trainMix$SuperPlasticizer, data=trainMix)
trainMix = mixtures[ inTrain,]
hist(trainMix$SuperPlasticizer, data=trainMix)
hist(trainMix$Superplasticizer, data=trainMix)
head(trainMix)
preProc <- preProcess(training[,2:13], method="pca", thresh=.9)
preProc
source("http://bioconductor.org/biocLite.R")
source("SampleSeq2")
install.packages("SampleSeq2")
install.packages("SampleSeq")
#!/bin/env Rscript
sorted_ED_N_head <- function(ccED,N_head,N_d_copy,oEDsum,loci_order,N_head_cc) {
N_loci       = length(ccED)
ij           = N_head
ij_loci      = 0
ij_loci_name = 0
if (N_loci > 1) {
for (i in 1:N_loci) {
ccEDi  = ccED[[i]]$ED[oEDsum]
N_ccEDi = length(ccEDi)
for (j in 1:N_ccEDi) {
if (sum(ccEDi[1:j]) >= N_d_copy) {
break
}
}
if (ij >= j) {
ij           = j
ij_loci      = i
ij_loci_name = names(ccED)[i]
}
}
if (ij_loci != 0) {
N_head     = N_head - ij
loci_order = c(loci_order,ij_loci_name)
N_head_cc  = c(N_head_cc,as.character(ccED[[ij_loci]]$cc[oEDsum][1:ij]))
ccED       = ccED[-ij_loci]
oEDsum     = oEDsum[-c(1:ij)]
sorted_ED_N_head(ccED,N_head,N_d_copy,oEDsum,loci_order,N_head_cc)
} else {
loci_order      = c(loci_order,names(ccED)[1])
re_N_head_cc    = c(N_head_cc,as.character(ccED[[1]]$cc[oEDsum][1:ij]))
re_min_N_d_copy = length(N_head_cc) + j
re              = list('N_head_cc'=re_N_head_cc,'min_N_d_copy'=re_min_N_d_copy)
re
}
} else {
ccEDi   = ccED[[1]]$ED[oEDsum]
N_ccEDi = length(ccEDi)
for (j in 1:N_ccEDi) {
if (sum(ccEDi[1:j]) >= N_d_copy) {
break
}
}
if (ij >= j) {
ij           = j
ij_loci      = 1
ij_loci_name = names(ccED)[1]
}
if (ij_loci != 0) {
N_head          = N_head - ij
loci_order      = c(loci_order,ij_loci_name)
N_head_cc       = c(N_head_cc,as.character(ccED[[ij_loci]]$cc[oEDsum][1:ij]))
if (N_head != 0) {
re_N_head_cc    = c(N_head_cc,as.character(ccED[[ij_loci]]$cc[oEDsum][ij+1:N_head]))
} else {
re_N_head_cc    = N_head_cc
}
re_min_N_d_copy = length(N_head_cc)
re              = list('N_head_cc'=re_N_head_cc,'min_N_d_copy'=re_min_N_d_copy)
re
} else {
loci_order      = c(loci_order,names(ccED)[1])
re_N_head_cc    = c(N_head_cc,as.character(ccED[[1]]$cc[oEDsum][1:ij]))
re_min_N_d_copy = length(N_head_cc) + j
re              = list('N_head_cc'=re_N_head_cc,'min_N_d_copy'=re_min_N_d_copy)
re
}
}
}
paramFileTemp <- function(file,N_head,N_d_copy) {
data   = read.table(file,header=TRUE)
N_loci = (length(names(data))-4)/2
cc     = data$sampleID
a_sum  = data$a_sum
ED_sum = data$ED_sum
for (i in 1:N_loci) {
EDi          = paste("ED_",i,sep="")
EDi_data     = data[EDi]
ccEDi        = data.frame(cc,EDi_data)
names(ccEDi) = c('cc','ED')
if (i == 1) {
ccED      = list(ccEDi)
} else {
ccED[[i]] = ccEDi
}
}
names(ccED) = c(1:N_loci)
oEDsum      = order(ED_sum,decreasing = TRUE)
loci_order  = NULL
N_head_cc   = NULL
sorted_ED   = sorted_ED_N_head(ccED,N_head,N_d_copy,oEDsum,loci_order,N_head_cc)
re          = list('N_loci'=N_loci,'sorted_E'=sorted_ED$N_head_cc,'min_samples_N_d_copy'=sorted_ED$min_N_d_copy)
re
}
expected <- function(file,N_head,N_d_copy) {
string       = paste("Read in file: ",file,sep="")
re           = paramFileTemp(file,N_head,N_d_copy)
topID        = re$sorted_E
topID_ED_sum = rep(0,N_head)
fdata        = read.table(file,header=TRUE)
fsampleID    = fdata$sampleID
for (i in 1:N_head) {
topID_ED_sum[i] = fdata$ED_sum[fsampleID==topID[i]]
}
out          = data.frame(sampleID=topID,ED_sum=topID_ED_sum)
string       = paste("IDs of the",N_head,"selected subjects are in:")
wLEFT        = paste("top",N_head,"ID.txt",sep="")
message(paste(string,wLEFT))
write.table(out,file=wLEFT,sep="\t",row.names=FALSE,quote=FALSE)
string = paste("Warning:",re$min_samples_N_d_copy,"samples are needed to have >=",N_d_copy,"disease variants per region.")
message(string)
}
args <- commandArgs(TRUE)
verbose  = TRUE
file     = args[1]             # "./expected.txt"
N_head   = as.numeric(args[2]) # 50
N_d_copy = as.numeric(args[3]) # 10
expected(file,N_head,N_d_copy)
library(ChIPpeakAnno)
library(org.Hs.eg.db)
library(biomaRt)
library(stringis)
source("http://bioconductor.org/biocLite.R")
BiocUpgrade
?BiocUpgrade
biocLite("BiocUpgrade")
biocLite("chIPseeker")
biocLite("ChIPseeker")
require(ChIPseeker)
library(ChIPseeker)
source("http://www.bioconductor.org/biocLite.R")
biocValid()
library(ChIPseeker)
biocLite()
biocLite("mirbase.db")
biocLite(c("oligoData","SVGAnnotation"))
library(ChIPseeker)
biocLite("GenomeInfoDb")
library(ChIPseeker)
setwd("~/NextGenSeq/RameshChIPseq/scripts")
condition_list <- c("cond1", "cond2", "common")
sample_list <- c("Inputs", "Pool1", "Pool2")
mart <- useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
hs_annotation_tss <- getAnnotation(mart, featureType="TSS")
biocLite("ChIPpeakAnnot")
biocLite("ChIPpeakAnno")
library(ChIPpeakAnno)
library(org.Hs.eg.db)
library(biomaRt)
library(stringis)
condition_list <- c("cond1", "cond2", "common")
sample_list <- c("Inputs", "Pool1", "Pool2")
mart <- useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
hs_annotation_tss <- getAnnotation(mart, featureType="TSS")
.libPath()
.libPaths()
remove.packages("ChIPpeakAnno")
library(ChIPpeakAnno)
hs_annotation_tss <- getAnnotation(mart, featureType="TSS")
